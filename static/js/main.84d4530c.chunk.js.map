{"version":3,"sources":["features/counter/Counter.module.css","features/counter/counterSlice.js","features/counter/Counter.js","features/User.js","features/Login.js","features/App/index.js","app/store.js","index.js"],"names":["module","exports","slice","createSlice","name","initialState","value","user","login","info","status","reducers","increment","state","decrement","incrementByAmount","action","console","log","payload","setUser","setLogin","actions","selectCount","counter","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","Number","asyncButton","family","User","useStyles","makeStyles","theme","root","width","menuButton","marginRight","spacing","title","flexGrow","ButtonAppBar","classes","AppBar","position","Toolbar","Typography","variant","Button","color","App","configureStore","reducer","counterReducer","devTools","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.84d4530c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const slice = createSlice({\n  name: \"counter\",\n  initialState: {\n    value: 0,\n    user: {},\n    login: {\n      info: {},\n      status: false\n    }\n  },\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      console.log(\"action\", action);\n      state.value += action.payload;\n    },\n    setUser: (state, action) => {\n      console.log(\"action\", action);\n      state.user = action.payload;\n    },\n    setLogin: (state, action) => {\n      console.log(\"action\", action);\n      state.login.info = action.payload;\n      state.login.status = !state.login.status;\n    }\n  }\n});\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  setUser,\n  setLogin\n} = slice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount) => (dispatch) => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\nexport default slice.reducer;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  selectCount,\n  setUser\n} from \"./counterSlice\";\nimport styles from \"./Counter.module.css\";\n\nexport function Counter() {\n  const count = useSelector(selectCount);\n  // const user = useSelector(st=>st.user);\n  const dispatch = useDispatch();\n  const [incrementAmount, setIncrementAmount] = useState(\"2\");\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() =>\n            dispatch(incrementByAmount(Number(incrementAmount) || 0))\n          }\n        >\n          Add Amount\n        </button>\n        <button\n          className={styles.asyncButton}\n          onClick={() => dispatch(setUser({ name: \"erfan\", family: \"karami\" }))}\n        >\n          Set User\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport default function User() {\r\n  const user = useSelector((state) => state.counter.user || {});\r\n\r\n  return <div>User:{` ${user.name} ${user.family}`}</div>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { setLogin } from \"./counter/counterSlice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // flexGrow: 1,\r\n    width: \"100%\"\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n  const login = useSelector((state) => state.counter.login || {});\r\n  const dispatch = useDispatch();\r\n\r\n  console.log(login);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {login.status ? ` ${login.info.name} ${login.info.family}` : \"User\"}\r\n          </Typography>\r\n          <Button\r\n            onClick={() =>\r\n              dispatch(setLogin({ name: \"erfan\", family: \"karami\" }))\r\n            }\r\n            color=\"inherit\"\r\n          >\r\n            {login.status ? \"Logout\" : \"Login\"}\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { Counter } from \"../counter/Counter\";\nimport User from \"../User\";\nimport Login from \"../Login\";\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Login />\n      <Counter />\n      <User />\n    </div>\n  );\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../features/counter/counterSlice\";\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer\n  },\n  devTools: true\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./features/App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}